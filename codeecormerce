// Project: ShopEase Secure Customer Dashboard (Spring Boot + Spring Security + JWT) // This single-file representation contains example source files for a minimal working implementation. // Create these files in a Maven project with groupId: com.shopease and artifactId: shopease-security

/* File: pom.xml */

<!-- Use this pom in your project's root --><project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"> <modelVersion>4.0.0</modelVersion> <groupId>com.shopease</groupId> <artifactId>shopease-security</artifactId> <version>1.0.0</version> <packaging>jar</packaging>

<properties>
    <java.version>17</java.version>
    <spring.boot.version>3.2.0</spring.boot.version>
</properties>

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>com.auth0</groupId>
        <artifactId>java-jwt</artifactId>
        <version>4.4.0</version>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-j</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <optional>true</optional>
    </dependency>
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        <version>2.1.0</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>

</project>/* File: src/main/resources/application.properties */ server.port=8080 spring.datasource.url=jdbc:mysql://localhost:3306/shopease_db?useSSL=false&allowPublicKeyRetrieval=true spring.datasource.username=root spring.datasource.password=your_db_password spring.jpa.hibernate.ddl-auto=update spring.jpa.show-sql=true

JWT config

jwt.secret=ReplaceThisWithASecretKeyChangeInProd jwt.expiration-ms=86400000

/* File: src/main/java/com/shopease/ShopeaseApplication.java */ package com.shopease;

import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication public class ShopeaseApplication { public static void main(String[] args){ SpringApplication.run(ShopeaseApplication.class, args); } }

/* File: src/main/java/com/shopease/model/Role.java */ package com.shopease.model;

public enum Role { ROLE_USER, ROLE_ADMIN }

/* File: src/main/java/com/shopease/model/User.java */ package com.shopease.model;

import jakarta.persistence.; import lombok.;

@Entity @Table(name = "users") @Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id;

@Column(unique=true, nullable=false)
private String username;

@Column(nullable=false)
private String password; // stored as BCrypt hash

@Column(unique=true, nullable=false)
private String email;

@Enumerated(EnumType.STRING)
private Role role;

}

/* File: src/main/java/com/shopease/model/Product.java */ package com.shopease.model;

import jakarta.persistence.; import lombok.;

@Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder public class Product { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String name; private Double price; }

/* File: src/main/java/com/shopease/model/Purchase.java */ package com.shopease.model;

import jakarta.persistence.; import lombok.; import java.time.LocalDateTime;

@Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder public class Purchase { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id;

@ManyToOne(fetch = FetchType.LAZY)
private User user;

@ManyToOne(fetch = FetchType.EAGER)
private Product product;

private Integer quantity;
private LocalDateTime purchaseDate;

public Double getTotalAmount() {
    return product.getPrice() * quantity;
}

}

/* File: src/main/java/com/shopease/repository/UserRepository.java */ package com.shopease.repository;

import com.shopease.model.User; import org.springframework.data.jpa.repository.JpaRepository; import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> { Optional<User> findByUsername(String username); boolean existsByUsername(String username); boolean existsByEmail(String email); }

/* File: src/main/java/com/shopease/repository/ProductRepository.java */ package com.shopease.repository;

import com.shopease.model.Product; import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {}

/* File: src/main/java/com/shopease/repository/PurchaseRepository.java */ package com.shopease.repository;

import com.shopease.model.Purchase; import com.shopease.model.User; import org.springframework.data.jpa.repository.JpaRepository; import java.util.List;

public interface PurchaseRepository extends JpaRepository<Purchase, Long> { List<Purchase> findByUser(User user); }

/* File: src/main/java/com/shopease/security/JwtUtil.java */ package com.shopease.security;

import com.auth0.jwt.JWT; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.interfaces.DecodedJWT; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component;

import java.util.Date;

@Component public class JwtUtil { @Value("${jwt.secret}") private String jwtSecret;

@Value("${jwt.expiration-ms}")
private Long jwtExpirationMs;

public String generateToken(String username, String role){
    Algorithm algo = Algorithm.HMAC256(jwtSecret);
    return JWT.create()
            .withSubject(username)
            .withClaim("role", role)
            .withExpiresAt(new Date(System.currentTimeMillis() + jwtExpirationMs))
            .sign(algo);
}

public DecodedJWT validateTokenAndGet(String token){
    Algorithm algo = Algorithm.HMAC256(jwtSecret);
    return JWT.require(algo).build().verify(token);
}

}

/* File: src/main/java/com/shopease/security/JwtAuthenticationFilter.java */ package com.shopease.security;

import com.auth0.jwt.interfaces.DecodedJWT; import jakarta.servlet.FilterChain; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Component; import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException; import java.util.List;

@Component public class JwtAuthenticationFilter extends OncePerRequestFilter {

@Autowired
private JwtUtil jwtUtil;

@Override
protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
    String header = request.getHeader("Authorization");
    if (header != null && header.startsWith("Bearer ")){
        try{
            String token = header.substring(7);
            DecodedJWT decoded = jwtUtil.validateTokenAndGet(token);
            String username = decoded.getSubject();
            String role = decoded.getClaim("role").asString();
            UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
                    username,
                    null,
                    List.of(new SimpleGrantedAuthority(role))
            );
            SecurityContextHolder.getContext().setAuthentication(auth);
        } catch (Exception ex){
            // invalid token -> clear context; let security handle forbidden
            SecurityContextHolder.clearContext();
        }
    }
    filterChain.doFilter(request, response);
}

}

/* File: src/main/java/com/shopease/security/CustomAccessDeniedHandler.java */ package com.shopease.security;

import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import org.springframework.security.access.AccessDeniedException; import org.springframework.security.web.access.AccessDeniedHandler; import org.springframework.stereotype.Component;

import java.io.IOException;

@Component public class CustomAccessDeniedHandler implements AccessDeniedHandler { @Override public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException { // For a web UI, redirect to a friendly page response.sendRedirect("/access-denied"); } }

/* File: src/main/java/com/shopease/security/SecurityConfig.java */ package com.shopease.security;

import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.ProviderManager; import org.springframework.security.config.Customizer; import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration @EnableMethodSecurity public class SecurityConfig {

@Autowired
private JwtAuthenticationFilter jwtAuthenticationFilter;

@Autowired
private CustomAccessDeniedHandler accessDeniedHandler;

@Bean
public PasswordEncoder passwordEncoder(){
    return new BCryptPasswordEncoder();
}

@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
    http
        .csrf(csrf -> csrf.disable())
        .authorizeHttpRequests(auth -> auth
            .requestMatchers("/api/auth/**", "/access-denied", "/v3/api-docs/**", "/swagger-ui/**").permitAll()
            .requestMatchers("/api/admin/**").hasAuthority("ROLE_ADMIN")
            .anyRequest().authenticated()
        )
        .exceptionHandling(ex -> ex.accessDeniedHandler(accessDeniedHandler))
        .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

    http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    return http.build();
}

}

/* File: src/main/java/com/shopease/service/UserService.java */ package com.shopease.service;

import com.shopease.model.Role; import com.shopease.model.User; import com.shopease.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service;

import java.util.List;

@Service public class UserService { @Autowired private UserRepository userRepository;

@Autowired
private PasswordEncoder passwordEncoder;

public User registerUser(String username, String email, String rawPassword){
    if(userRepository.existsByUsername(username)) throw new RuntimeException("Username already exists");
    if(userRepository.existsByEmail(email)) throw new RuntimeException("Email already exists");
    User u = User.builder()
            .username(username)
            .email(email)
            .password(passwordEncoder.encode(rawPassword))
            .role(Role.ROLE_USER)
            .build();
    return userRepository.save(u);
}

public List<User> getAllUsers(){
    return userRepository.findAll();
}

}

/* File: src/main/java/com/shopease/controller/AuthController.java */ package com.shopease.controller;

import com.shopease.model.User; import com.shopease.security.JwtUtil; import com.shopease.service.UserService; import com.shopease.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.*;

import jakarta.validation.constraints.NotBlank; import java.util.Map;

@RestController @RequestMapping("/api/auth") @Validated public class AuthController { @Autowired private UserService userService;

@Autowired
private UserRepository userRepository;

@Autowired
private PasswordEncoder passwordEncoder;

@Autowired
private JwtUtil jwtUtil;

record RegisterRequest(@NotBlank String username, @NotBlank String email, @NotBlank String password){}
record LoginRequest(@NotBlank String username, @NotBlank String password){}

@PostMapping("/register")
public ResponseEntity<?> register(@RequestBody RegisterRequest req){
    User u = userService.registerUser(req.username(), req.email(), req.password());
    return ResponseEntity.ok(Map.of("message","User registered", "username", u.getUsername()));
}

@PostMapping("/login")
public ResponseEntity<?> login(@RequestBody LoginRequest req){
    var opt = userRepository.findByUsername(req.username());
    if(opt.isEmpty()) return ResponseEntity.status(401).body(Map.of("error","Invalid credentials"));
    User u = opt.get();
    if(!passwordEncoder.matches(req.password(), u.getPassword())){
        return ResponseEntity.status(401).body(Map.of("error","Invalid credentials"));
    }
    String token = jwtUtil.generateToken(u.getUsername(), u.getRole().name());
    return ResponseEntity.ok(Map.of("token", token));
}

}

/* File: src/main/java/com/shopease/controller/UserController.java */ package com.shopease.controller;

import com.shopease.model.Purchase; import com.shopease.model.User; import com.shopease.repository.PurchaseRepository; import com.shopease.repository.UserRepository; import com.auth0.jwt.JWT; import com.auth0.jwt.interfaces.DecodedJWT; import com.shopease.security.JwtUtil; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.security.core.Authentication; import org.springframework.web.bind.annotation.*;

import java.util.List; import java.util.stream.Collectors;

@RestController @RequestMapping("/api/user") public class UserController {

@Autowired
private PurchaseRepository purchaseRepository;

@Autowired
private UserRepository userRepository;

@GetMapping("/dashboard")
public ResponseEntity<?> dashboard(Authentication authentication){
    // authentication.getName() is username because JwtAuthenticationFilter set it as principal
    String username = (String) authentication.getPrincipal();
    var user = userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("User not found"));
    long purchasesCount = purchaseRepository.findByUser(user).size();
    return ResponseEntity.ok(Map.of("username", user.getUsername(), "email", user.getEmail(), "purchasesCount", purchasesCount));
}

@GetMapping("/purchases")
public ResponseEntity<?> purchases(Authentication authentication){
    String username = (String) authentication.getPrincipal();
    var user = userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("User not found"));
    List<Purchase> purchases = purchaseRepository.findByUser(user);
    var dto = purchases.stream().map(p -> Map.of(
            "productName", p.getProduct().getName(),
            "purchaseDate", p.getPurchaseDate(),
            "quantity", p.getQuantity(),
            "price", p.getProduct().getPrice(),
            "totalAmount", p.getTotalAmount()
    )).collect(Collectors.toList());
    return ResponseEntity.ok(dto);
}

}

/* File: src/main/java/com/shopease/controller/AdminController.java */ package com.shopease.controller;

import com.shopease.model.User; import com.shopease.repository.PurchaseRepository; import com.shopease.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController @RequestMapping("/api/admin") public class AdminController {

@Autowired
private UserRepository userRepository;

@Autowired
private PurchaseRepository purchaseRepository;

@GetMapping("/users")
public ResponseEntity<?> getAllUsers(){
    List<User> users = userRepository.findAll();
    return ResponseEntity.ok(users);
}

@GetMapping("/purchases")
public ResponseEntity<?> getAllPurchases(){
    return ResponseEntity.ok(purchaseRepository.findAll());
}

}

/* File: src/main/java/com/shopease/controller/ViewController.java */ package com.shopease.controller;

import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping;

@Controller public class ViewController { // simple access-denied page for web UI redirect @GetMapping("/access-denied") public String accessDenied(){ return "access-denied"; // map to src/main/resources/templates/access-denied.html if using Thymeleaf } }

/* Notes and next steps:

This example shows a stateless JWT-based authentication.

To test:

1. POST /api/auth/register with {"username":"alice","email":"a@x.com","password":"pass"}


2. POST /api/auth/login with {"username":"alice","password":"pass"} => gets token


3. Call GET /api/user/dashboard with header Authorization: Bearer <token>



Admin: create a user with role ROLE_ADMIN directly in DB or modify registration to allow admin creation for testing.

Use HTTPS in production, stronger secret management, refresh tokens, token revocation, rate limiting, input validation and structured error responses.

For a UI redirect-based authentication (formLogin), replace JWT filter and configure formLogin() in SecurityConfig. */


